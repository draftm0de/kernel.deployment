[33mcommit 789d07fb367dc3cab701b15946b191e35062a28f[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m, [m[1;33mtag: 2.0.0[m[33m, [m[1;33mtag: 2.0[m[33m, [m[1;33mtag: 2[m[33m, [m[1;33mtag: 1.2.1[m[33m, [m[1;33mtag: 1.2.0[m[33m, [m[1;33mtag: 1.2[m[33m, [m[1;33mtag: 1.1.7[m[33m, [m[1;33mtag: 1.1.6[m[33m, [m[1;33mtag: 1.1.5[m[33m, [m[1;33mtag: 1.1.4[m[33m, [m[1;33mtag: 1.1.3[m[33m, [m[1;33mtag: 1.1.2[m[33m, [m[1;33mtag: 1.1.1[m[33m, [m[1;33mtag: 1.1[m[33m, [m[1;33mtag: 1[m[33m, [m[1;31morigin/main[m[33m, [m[1;31morigin/HEAD[m[33m, [m[1;32mttt[m[33m)[m
Author: Peter Fux <peter.fux@draftmode.io>
Date:   Wed Dec 11 14:55:50 2024 +0100

    working on build-commit-tag

[1mdiff --git a/scripts/bash/src/converter/patch-version.sh b/scripts/bash/src/converter/patch-version.sh[m
[1mindex 98e08fd..315fa32 100755[m
[1m--- a/scripts/bash/src/converter/patch-version.sh[m
[1m+++ b/scripts/bash/src/converter/patch-version.sh[m
[36m@@ -23,7 +23,7 @@[m [mfor arg in "$@"; do[m
   esac[m
 done[m
 [m
[31m-source ${src_dir}/converter/branch-to-version.sh "${version}" >/dev/null[m
[32m+[m[32msource ${src_dir}/converter/branch-to-version.sh "${version}" &>/dev/null[m
 if [ -n "${BRANCH}" ]; then[m
   echo "> version ${version} matches version patterns: yes" 1>&2[m
   echo "> prefix: ${PREFIX}" 1>&2[m
[36m@@ -39,7 +39,7 @@[m [mif [ -n "${BRANCH}" ]; then[m
   BRANCH=""[m
   if [ -n "${latest}" ]; then[m
     echo "> --latest given: yes (${latest})" 1>&2[m
[31m-    source ${src_dir}/converter/branch-to-version.sh "${latest}" >/dev/null[m
[32m+[m[32m    source ${src_dir}/converter/branch-to-version.sh "${latest}" &>/dev/null[m
     if [ -n "${BRANCH}" ]; then[m
       echo "> > latest ${latest} matches version patterns: yes" 1>&2[m
       echo "> > prefix: ${PREFIX}" 1>&2[m
[36m@@ -53,32 +53,56 @@[m [mif [ -n "${BRANCH}" ]; then[m
       latest_patch="$PATCH"[m
       latest_postfix="$POSTFIX"[m
       BRANCH="${latest_prefix}${latest_major}"[m
[31m-      if [ $base_major -gt $latest_major ]; then[m
[31m-        echo "> > > base major $base_major > latest major $latest_major" 1>&2[m
[31m-        latest_major="$base_major"[m
[31m-        latest_minor="0"[m
[31m-        if [ -n "${latest_patch}" ]; then[m
[31m-          latest_minor="1"[m
[31m-          latest_patch="0"[m
[32m+[m[32m      if [ -z "${failure}" ] && [ $latest_major -gt $base_major ]; then[m
[32m+[m[32m        failure="latest major $latest_major > base major $base_major"[m
[32m+[m[32m      fi[m
[32m+[m[32m      if [ -z "${failure}" ] && [ $base_major -eq $latest_major ] && [ $latest_minor -gt $base_minor ]; then[m
[32m+[m[32m        failure="latest minor $latest_minor > base minor $base_minor"[m
[32m+[m[32m      fi[m
[32m+[m[32m      if [ -z "${failure}" ]; then[m
[32m+[m[32m        if [ $base_major -gt $latest_major ]; then[m
[32m+[m[32m          echo "> > > base major $base_major > latest major $latest_major" 1>&2[m
[32m+[m[32m          latest_major="$base_major"[m
[32m+[m[32m          latest_minor="0"[m
[32m+[m[32m          if [ -n "${latest_patch}" ]; then[m
[32m+[m[32m            latest_minor="1"[m
[32m+[m[32m            latest_patch="0"[m
[32m+[m[32m          fi[m
[32m+[m[32m        elif [ $base_minor -gt $latest_minor ]; then[m
[32m+[m[32m          echo "> > > base minor $base_minor > latest minor $latest_minor" 1>&2[m
[32m+[m[32m          latest_minor="$base_minor"[m
[32m+[m[32m          if [ -n "${latest_patch}" ]; then[m
[32m+[m[32m            if [ -n "${base_patch}" ]; then[m
[32m+[m[32m              echo "> > > base has patch (patch from base)" 1>&2[m
[32m+[m[32m              latest_patch="${base_patch}"[m
[32m+[m[32m            else[m
[32m+[m[32m              echo "> > > base has patch (set patch=0)" 1>&2[m
[32m+[m[32m              latest_patch="0"[m
[32m+[m[32m            fi[m
[32m+[m[32m          else[m
[32m+[m[32m            echo "> > > latest has no patch" 1>&2[m
[32m+[m[32m          fi[m
         fi[m
[31m-      elif [ $base_minor -gt $latest_minor ]; then[m
[31m-        echo "> > > base minor $base_minor > latest minor $latest_minor" 1>&2[m
[31m-        latest_minor="$base_minor"[m
         if [ -n "${latest_patch}" ]; then[m
[31m-          latest_patch="0"[m
[32m+[m[32m          echo "> > > increase patch version" 1>&2[m
[32m+[m[32m          BRANCH="${BRANCH}.${latest_minor}"[m
[32m+[m[32m          PATCH=$((latest_patch + 1))[m
[32m+[m[32m          BRANCH="${BRANCH}.${PATCH}"[m
[32m+[m[32m        elif [ -n "${latest_minor}" ]; then[m
[32m+[m[32m          echo "> > > increase minor version" 1>&2[m
[32m+[m[32m          MINOR=$((latest_minor + 1))[m
[32m+[m[32m          BRANCH="${BRANCH}.${MINOR}"[m
         fi[m
[32m+[m[32m        POSTFIX="${latest_postfix}"[m
[32m+[m[32m      else[m
[32m+[m[32m        echo "> > > ${failure}" 1>&2[m
[32m+[m[32m        BRANCH=""[m
[32m+[m[32m        PREFIX=""[m
[32m+[m[32m        MAJOR=""[m
[32m+[m[32m        MINOR=""[m
[32m+[m[32m        PATCH=""[m
[32m+[m[32m        POSTFIX=""[m
       fi[m
[31m-      if [ -n "${latest_patch}" ]; then[m
[31m-        echo "> > > increase patch version" 1>&2[m
[31m-        BRANCH="${BRANCH}.${latest_minor}"[m
[31m-        PATCH=$((latest_patch + 1))[m
[31m-        BRANCH="${BRANCH}.${PATCH}"[m
[31m-      elif [ -n "${latest_minor}" ]; then[m
[31m-        echo "> > > increase minor version" 1>&2[m
[31m-        MINOR=$((latest_minor + 1))[m
[31m-        BRANCH="${BRANCH}.${MINOR}"[m
[31m-      fi[m
[31m-      POSTFIX="${latest_postfix}"[m
     else[m
       echo "> > latest ${latest} matches version patterns: no" 1>&2[m
       if [ -n "${silent}" ]; then[m
[1mdiff --git a/scripts/bash/src/docker/image-manifest-jq.sh b/scripts/bash/src/docker/image-manifest-jq.sh[m
[1mdeleted file mode 100755[m
[1mindex c5e6199..0000000[m
[1m--- a/scripts/bash/src/docker/image-manifest-jq.sh[m
[1m+++ /dev/null[m
[36m@@ -1,14 +0,0 @@[m
[31m-#!/bin/bash[m
[31m-set -e[m
[31m-set -o pipefail[m
[31m-[m
[31m-image="${1}"[m
[31m-jq_filter="${2}"[m
[31m-PROPERTY=""[m
[31m-if docker manifest inspect "${image}" &>/dev/null; then[m
[31m-  response=$(docker manifest inspect "${image}" | jq -r "${jq_filter}")[m
[31m-  if [ "$response" != "null" ]; then[m
[31m-    PROPERTY="${response}"[m
[31m-  fi[m
[31m-fi[m
[31m-export PROPERTY[m
\ No newline at end of file[m
[1mdiff --git a/scripts/bash/src/docker/image-manifest.sh b/scripts/bash/src/docker/image-manifest.sh[m
[1mnew file mode 100755[m
[1mindex 0000000..7a087c7[m
[1m--- /dev/null[m
[1m+++ b/scripts/bash/src/docker/image-manifest.sh[m
[36m@@ -0,0 +1,49 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32mset -e[m
[32m+[m[32mset -o pipefail[m
[32m+[m
[32m+[m[32mecho "/docker/image-manifest-jq" 1>&2[m
[32m+[m
[32m+[m[32mimage="${1}"[m
[32m+[m[32msilent=""[m
[32m+[m[32mfor arg in "$@"; do[m
[32m+[m[32m  case "$arg" in[m
[32m+[m[32m    --jq=*)[m
[32m+[m[32m      echo "> arg: $arg" 1>&2[m
[32m+[m[32m      jq_filter="${arg#*=}"[m
[32m+[m[32m    ;;[m
[32m+[m[32m    --silent)[m
[32m+[m[32m      echo "> arg: $arg" 1>&2[m
[32m+[m[32m      silent=$arg[m
[32m+[m[32m    ;;[m
[32m+[m[32m  esac[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32mresponse=""[m
[32m+[m[32mif [ -n "${image}" ]; then[m
[32m+[m[32m  if docker manifest inspect "${image}" &>/dev/null; then[m
[32m+[m[32m    manifest=$(docker manifest inspect "${image}")[m
[32m+[m[32m    if [ -n "${jq_filter}" ]; then[m
[32m+[m[32m      property=$(echo "${manifest}" | jq -r "${jq_filter}")[m
[32m+[m[32m      if [ "$property" != "null" ]; then[m
[32m+[m[32m        response="${property}"[m
[32m+[m[32m      else[m
[32m+[m[32m        echo "> jq ${jq_filter} in manifest not found" 1>&2[m
[32m+[m[32m      fi[m
[32m+[m[32m    else[m
[32m+[m[32m      response="${manifest}"[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    echo "> manifest $image not found" 1>&2[m
[32m+[m[32m  fi[m
[32m+[m[32melse[m
[32m+[m[32m  echo "> missing #argument manifest" 1>&2[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mif [ -n "${response}" ]; then[m
[32m+[m[32m  echo "$response"[m
[32m+[m[32melse[m
[32m+[m[32m  if [ -n "${silent}" ]; then[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32mfi[m
[1mdiff --git a/scripts/bash/src/git/read-commit-tags.sh b/scripts/bash/src/git/read-commit-tags.sh[m
[1mindex fbc6b0f..111c15f 100755[m
[1m--- a/scripts/bash/src/git/read-commit-tags.sh[m
[1m+++ b/scripts/bash/src/git/read-commit-tags.sh[m
[36m@@ -62,7 +62,6 @@[m [mif git tag --points-at "$commit" &>/dev/null; then[m
     case "$filter" in[m
       version)[m
         is_version=$(source "${src_dir}/converter/branch-to-version.sh" "${commit_tag}" 2>/dev/null)[m
[31m-        #if source "${src_dir}/converter/branch-to-version.sh" "${commit_tag}" 2>/dev/null; then[m
         if [ -n "${is_version}" ]; then[m
           echo "> > commit tag $commit_tag matches version patterns: apply " 1>&2[m
         else[m
[1mdiff --git a/scripts/bash/src/shunit.sh b/scripts/bash/src/shunit.sh[m
[1mindex 99d0d9a..c61239b 100755[m
[1m--- a/scripts/bash/src/shunit.sh[m
[1m+++ b/scripts/bash/src/shunit.sh[m
[36m@@ -10,6 +10,16 @@[m [mshTest() {[m
   expected="${1}"[m
   shift[m
   arguments="${*}"[m
[32m+[m[32m  if [[ "${expected}" == "{file"*"}" ]]; then[m
[32m+[m[32m    expected="${expected#\{file:}"[m
[32m+[m[32m    expected="${expected%\}}"[m
[32m+[m[32m    if [ -f "${expected}" ]; then[m
[32m+[m[32m      expected=$(cat "${expected}")[m
[32m+[m[32m    else[m
[32m+[m[32m      echo "${source_print} [${arguments}] failure, expected {file:} does not exist"[m
[32m+[m[32m      return[m
[32m+[m[32m    fi[m
[32m+[m[32m  fi[m
   if [ "${expected}" == "{true}" ] || [ "${expected}" == "{false}" ]; then[m
     if [ -n "${debugMode}" ]; then[m
       if ${source} $arguments; then[m
[36m@@ -59,7 +69,7 @@[m [mshTest() {[m
 setup() {[m
   if [ -n "${main_tags[*]}" ]; then[m
     for tag in "${main_tags[@]}"; do[m
[31m-      git tag -f "${tag}" main >/dev/null[m
[32m+[m[32m      git tag -f "${tag}" main &>/dev/null[m
     done[m
   fi[m
 }[m
[36m@@ -67,7 +77,7 @@[m [msetup() {[m
 teardown() {[m
   if [ -n "${main_tags[*]}" ]; then[m
     for tag in "${main_tags[@]}"; do[m
[31m-      git tag -d "${tag}" >/dev/null[m
[32m+[m[32m      git tag -d "${tag}" &>/dev/null[m
     done[m
   fi[m
 }[m
[1mdiff --git a/scripts/bash/tests.sh b/scripts/bash/tests.sh[m
[1mindex 81e547a..0888da9 100755[m
[1m--- a/scripts/bash/tests.sh[m
[1m+++ b/scripts/bash/tests.sh[m
[36m@@ -8,14 +8,12 @@[m [mmain_tags=("1.0" "1.0.1" "1.0.x1" "1.1" "1.1.1" "no.version")[m
 [m
 scripts=()[m
 scripts+=("converter/branch-to-version")[m
[32m+[m[32mscripts+=("converter/patch-version")[m
[32m+[m[32mscripts+=("docker/image-name-explode")[m
[32m+[m[32m#scripts+=("docker/image-manifest")[m
 scripts+=("git/read-tags")[m
 scripts+=("git/read-commit-tags")[m
[31m-scripts+=("docker/image-name-explode")[m
[31m-#scripts+=("converter/explode-docker-image-name")[m
[31m-#scripts+=("converter/patch-version")[m
[31m-#scripts+=("docker/image-manifest-jq")[m
 [m
[31m-scripts=("converter/patch-version")[m
[32m+[m[32mscripts=("docker/image-name-explode")[m
 [m
 shTests[m
[31m-[m
[1mdiff --git a/scripts/bash/tests/converter/patch-version.sh b/scripts/bash/tests/converter/patch-version.sh[m
[1mindex 56d5292..561f6f6 100644[m
[1m--- a/scripts/bash/tests/converter/patch-version.sh[m
[1m+++ b/scripts/bash/tests/converter/patch-version.sh[m
[36m@@ -7,31 +7,11 @@[m [mbase_path="$base_path/../../src"[m
 SCRIPT="${base_path}/converter/patch-version.sh"[m
 [m
 #debugMode="true"[m
[31m-#shTest "${SCRIPT}" "1.1" "1"[m
[31m-#shTest "${SCRIPT}" "1.1.1" "1.1"[m
[31m-#shTest "${SCRIPT}" "1.1.4" "1.1" "--latest=1.1.3"[m
[31m-#shTest "${SCRIPT}" "1.2.1" "1.2" "--latest=1.1.3"[m
[31m-shTest "${SCRIPT}" "{false}" "1x" "--silent"[m
[31m-exit 0[m
[31m-[m
[31m-[m
[31m-[m
[31m-inputs=("1 1.0" "1.2 1.2.3" "v1.2" "v1")[m
[31m-[m
[31m-for input in "${inputs[@]}"; do[m
[31m-  # shellcheck disable=SC1090[m
[31m-  # echo "input"[m
[31m-  if [[ "$input" == *" "* ]]; then[m
[31m-    base_branch="${input%% *}"[m
[31m-    latest_branch="${input#* }"[m
[31m-  else[m
[31m-    base_branch="$input"[m
[31m-    latest_branch=""[m
[31m-  fi[m
[31m-  echo "> > latest_branch:$latest_branch:"[m
[31m-  echo "> > base_branch:$base_branch:"[m
[31m-  source "${SCRIPT}" "${base_branch}" "${latest_branch}"[m
[31m-  echo "> > > increased branch: $BRANCH"[m
[31m-done[m
[31m-[m
[31m-[m
[32m+[m[32mshTest "${SCRIPT}" "1.1" "1"[m
[32m+[m[32mshTest "${SCRIPT}" "1.1.1" "1.1"[m
[32m+[m[32mshTest "${SCRIPT}" "1.2.1" "1.2" "--latest="[m
[32m+[m[32mshTest "${SCRIPT}" "1.1.4" "1.1" "--latest=1.1.3"[m
[32m+[m[32mshTest "${SCRIPT}" "1.2.1" "1.2" "--latest=1.1.3"[m
[32m+[m[32mshTest "${SCRIPT}" "1.2.6" "1.2.5" "--latest=1.1.3"[m
[32m+[m[32mshTest "${SCRIPT}" "" "1" "--latest=2.1"[m
[32m+[m[32mshTest "${SCRIPT}" "" "1.1" "--latest=1.2.1"[m
[1mdiff --git a/scripts/bash/tests/docker/image-manifest-busybox.1.34.json b/scripts/bash/tests/docker/image-manifest-busybox.1.34.json[m
[1mnew file mode 100644[m
[1mindex 0000000..3e6c035[m
[1m--- /dev/null[m
[1m+++ b/scripts/bash/tests/docker/image-manifest-busybox.1.34.json[m
[36m@@ -0,0 +1,100 @@[m
[32m+[m[32m{[m
[32m+[m[32m   "schemaVersion": 2,[m
[32m+[m[32m   "mediaType": "application/vnd.docker.distribution.manifest.list.v2+json",[m
[32m+[m[32m   "manifests": [[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:51de9138b0cc394c813df84f334d638499333cac22edd05d0300b2c9a2dc80dd",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "amd64",[m
[32m+[m[32m            "os": "linux"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:40b22bd39e49b9cea975a391de1caad93d63fadc3d23b7dcbf96ec6656064737",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "arm",[m
[32m+[m[32m            "os": "linux",[m
[32m+[m[32m            "variant": "v5"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 527,[m
[32m+[m[32m         "digest": "sha256:d88e0acf1f43052d87d2acb55823f1074a7fd0f7abfe23c07d00e1616cdd15e0",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "arm",[m
[32m+[m[32m            "os": "linux",[m
[32m+[m[32m            "variant": "v6"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:51a9e8ef37a92df3f231b6f96b86c45a622a9078a642b82aa2f45e96c850d92a",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "arm",[m
[32m+[m[32m            "os": "linux",[m
[32m+[m[32m            "variant": "v7"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:9421d4cc473b282bf48888476604444fa3c74f6e3f5cddfa210e773c534cd33d",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "arm64",[m
[32m+[m[32m            "os": "linux",[m
[32m+[m[32m            "variant": "v8"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:da6b2a01ddb011c518d5b07245d781de7c33d6e4cb058d137e9c06ffce4ad7f3",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "386",[m
[32m+[m[32m            "os": "linux"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:5fa4e832d41ced43f8a01216c3d6af2ee1607b697cea7c1171d8eb8e2a951388",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "mips64le",[m
[32m+[m[32m            "os": "linux"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:b6b4d55059e0cabc8ed615b2a656303f060e16a24b28cb2c18f71e896795e509",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "ppc64le",[m
[32m+[m[32m            "os": "linux"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 527,[m
[32m+[m[32m         "digest": "sha256:92f6eed1de620dd42e1fb36e4a04e394d462b180cb48672189a90cb236df35f7",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "riscv64",[m
[32m+[m[32m            "os": "linux"[m
[32m+[m[32m         }[m
[32m+[m[32m      },[m
[32m+[m[32m      {[m
[32m+[m[32m         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",[m
[32m+[m[32m         "size": 528,[m
[32m+[m[32m         "digest": "sha256:a748a1de3d1647c5f4c42c4ccc3d55024a40d9663e3d7d1287e319c342df4d9a",[m
[32m+[m[32m         "platform": {[m
[32m+[m[32m            "architecture": "s390x",[m
[32m+[m[32m            "os": "linux"[m
[32m+[m[32m         }[m
[32m+[m[32m      }[m
[32m+[m[32m   ][m
[32m+[m[32m}[m
[1mdiff --git a/scripts/bash/tests/docker/image-manifest-jq.sh b/scripts/bash/tests/docker/image-manifest-jq.sh[m
[1mdeleted file mode 100644[m
[1mindex d172c07..0000000[m
[1m--- a/scripts/bash/tests/docker/image-manifest-jq.sh[m
[1m+++ /dev/null[m
[36m@@ -1,22 +0,0 @@[m
[31m-#!/bin/bash[m
[31m-set -e[m
[31m-set -o pipefail[m
[31m-[m
[31m-base_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"[m
[31m-base_path="$base_path/../../src"[m
[31m-[m
[31m-SCRIPT="${base_path}/docker/image-manifest-jq.sh"[m
[31m-[m
[31m-IMAGE="draftmode/image.caddy:test"[m
[31m-JQ=".config.digest"[m
[31m-# shellcheck disable=SC1090[m
[31m-source "${SCRIPT}" "${IMAGE}" "${JQ}"[m
[31m-echo "> > ${IMAGE} >> ${JQ}"[m
[31m-echo "PROPERTY:$PROPERTY"[m
[31m-[m
[31m-IMAGE="draftmode/image.caddy:test"[m
[31m-JQ=".config.size"[m
[31m-# shellcheck disable=SC1090[m
[31m-source "${SCRIPT}" "${IMAGE}" "${JQ}"[m
[31m-echo "> > ${IMAGE} >> ${JQ}"[m
[31m-echo "PROPERTY:$PROPERTY"[m
\ No newline at end of file[m
[1mdiff --git a/scripts/bash/tests/docker/image-manifest.sh b/scripts/bash/tests/docker/image-manifest.sh[m
[1mnew file mode 100644[m
[1mindex 0000000..c50de93[m
[1m--- /dev/null[m
[1m+++ b/scripts/bash/tests/docker/image-manifest.sh[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32mset -e[m
[32m+[m[32mset -o pipefail[m
[32m+[m
[32m+[m[32mbase_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"[m
[32m+[m[32mbase_path="$base_path/../../src"[m
[32m+[m[32mSCRIPT="${base_path}/docker/image-manifest.sh"[m
[32m+[m
[32m+[m[32mdebugMode="true"[m
[32m+[m[32mshTest "${SCRIPT}" "{file:tests/docker/image-manifest-busybox.1.34.json}" "busybox:1.34"[m
[32m+[m[32m#shTest "${SCRIPT}" "2" "busybox:1.34" "--jq=.schemaVersion"[m
[32m+[m[32m#shTest "${SCRIPT}" "" "busybox:1.34" "--jq=.unknownTag"[m
[32m+[m[32m#shTest "${SCRIPT}" "{false}" "busybox:1.34" "--jq=.unknownTag" "--silent"[m
[32m+[m[32m#shTest "${SCRIPT}" "" "unknown/registry:1.0" "--jq=.schemaVersion"[m
[32m+[m[32m#shTest "${SCRIPT}" "{false}" "unknown/registry:1.0" "--jq=.schemaVersion" "--silent"[m
