name: Build Docker Image

on:
  workflow_call:
    inputs:
      namespace:
        description: "Image (Namespace)"
        required: true
        type: string      
      image:
        description: "Image (Name)"
        required: true
        type: string
      tag:
        description: "Image (Tag)"
        required: true
        type: string
      context:
        description: "Docker build context/path"
        required: true
        type: string
      build_args:
        description: "Filename to be used for --build-args"
        required: false
        type: string
      sha_protection:
        description: "Tagging and Pushing protect already existing SHA"
        required: false
        type: choice
        options:
          - true
          - false
        default: "false"
    secrets:
      docker_username:
        description: "Docker Login (Username)"
        required: true
      docker_password:
        description: "Docker Login (Password)"
        required: true

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out kernel.deployment repository
        uses: actions/checkout@v4
        with:
          repository: draftm0de/kernel.deployment
          path: parent

      - name: Check out own (parent) repository
        uses: actions/checkout@v4
        with:
          path: content

      - name: Docker Image Build
        env:
          BUILD_ARGS_FILE: ${{ inputs.build_args }}
        run: |
          echo "[Notice] Build image..."
          CONTEXT="content/${{ inputs.context }}"
          TAG="--tag ${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.tag }}"
          BUILD_ARGS_FILE="$CONTEXT/${BUILD_ARGS_FILE:-.build_args}"
          if [ -f "$BUILD_ARGS_FILE" ]; then
            ./parent/docker.sh build $TAG --build-args=$BUILD_ARGS_FILE $CONTEXT
          else
            docker build $TAG $CONTEXT
          fi
          echo "[Notice] > build successfully"

      - name: Log in to Docker Hub
        run: |
          echo "${{ inputs.docker_password }} > content/DOCKER_PASSWORD
          cat "content/DOCKER_PASSWORD" | docker login -u "${{ secrets.docker_username }}" --password-stdin

      - name: Protect duplicate SHA
        if: ${{ inputs.sha_scan == 'true' }}
        run: |
          echo "[Notice] Protect built SHA against remote"          
          REPOSITORY="${{ inputs.namespace }}/${{ inputs.image }}"
          IMAGE_NAME="$REPOSITORY:${{ inputs.tag }}"
          SHA=$("./parent/docker.sh" "image sha" "$IMAGE_NAME")
          echo "[Debug] SHA for $IMAGE_NAME: $SHA"
          ("./parent/docker.sh" "image tags" "$REPOSITORY" "--remote" "--sha=$SHA" "--exists")
          echo "[Notice] > Protection successfully"
