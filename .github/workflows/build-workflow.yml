name: Build Docker Image

on:
  workflow_call:
    inputs:
      namespace:
        description: "Image (Namespace)"
        required: true
        type: string      
      image:
        description: "Image (Name)"
        required: true
        type: string
      context:
        description: "Docker build context/path"
        required: true
        type: string
      build_args_file:
        description: "Filename to be used for --build-args"
        required: false
        type: string
      tag_level:
        description: "Levels for tagging an image"
        required: true
        type: number
      tag_base_version_file:
         description: "Filename within the Base Version for auto tagging"
         required: false
         type: string
      protected_tag:
        description: "Protect against duplicate SHA"
        type: string
        required: false
        default: "false"
    secrets:
      docker_username:
        description: "Docker Login (Username)"
        required: true
      docker_password:
        description: "Docker Login (Password)"
        required: true

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Check out kernel.deployment repository
        uses: actions/checkout@v4
        with:
          repository: draftm0de/kernel.deployment
          path: parent

      - name: Check out own (parent) repository
        uses: actions/checkout@v4
        with:
          path: content

      - name: Upload repositories as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: |
            content/
            parent/

  build:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Download the artifact with the checked-out repositories
        uses: actions/download-artifact@v3
        with:
          name: source

      - name: Build Docker Image
        env:
          BUILD_ARGS_FILE: ${{ inputs.build_args_file }}
        run: |
          echo "[Notice] Build image..."
          CONTEXT="content/${{ inputs.context }}"
          IMAGE="${{ inputs.namespace }}/${{ inputs.image }}:latest"
          BUILD_ARGS_FILE="$CONTEXT/${BUILD_ARGS_FILE:-.build_args}"
          ls $CONTEXT -la
          if [ -f "$BUILD_ARGS_FILE" ]; then
            ./parent/docker.sh build --tag $IMAGE --build-args=$BUILD_ARGS_FILE $CONTEXT
          else
            docker build --tag $IMAGE $CONTEXT
          fi
          echo "[Notice] > build successfully"

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.docker_password }}" > DOCKER_PASSWORD
          cat "DOCKER_PASSWORD" | docker login -u "${{ secrets.docker_username }}" --password-stdin   

      - name: Protect duplicate SHA
        run: |
          echo "[Notice] Protect built SHA against remote"          
          REPOSITORY="${{ inputs.namespace }}/${{ inputs.image }}"
          IMAGE="$REPOSITORY:${{ inputs.protected_tag }}"
          SHA=$("./parent/docker.sh" "image sha" "$IMAGE")
          echo "[Debug] SHA for $IMAGE: $SHA"
          ("./parent/docker.sh" "image tags" "$REPOSITORY" "--remote" "--sha=$SHA" "--exists")
          echo "[Notice] > Protection successfully"
  tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get Latest Remote Tag
        id: get_latest_tag
        run: |
          IMAGE="${{ inputs.namespace }}/${{ inputs.image }}:latest"
          echo "[Notice] Get latest remote tag for $IMAGE"
          LATEST_TAG=$("./parent/docker.sh" "image tags" "$IMAGE" "--remote" "--latest=patch")
          echo "LATEST_TAG=${LATEST_TAG:-0.0.0}" >> $GITHUB_ENV
          echo "[Notice] > latest remote tag for $IMAGE: $LATEST_TAG"          

      - name: Tag Docker Image
        run: |
          echo "[Notice] Tag docker image"
          REPOSITORY="${{ inputs.namespace }}/${{ inputs.image }}"          
          IMAGE="$REPOSITORY:latest"
          CONTEXT="content/${{ inputs.context }}"
          TAG_VERSION_FILE="$CONTEXT/.version"
          if [ -f "$TAG_VERSION_FILE" ]; then
            TAG_VERSION=$(cat $TAG_VERSION_FILE)
            TAG_INCREASE="--tag-increase=$TAG_VERSION"
            echo "[Notice] automatically increase: $TAG_VERSION"
          else
            TAG_INCREASE="--tag-increase"
          fi         
          echo "[Notice] latest tag: $LATEST_TAG"
          echo "[Notice] count of levels for tagging: ${{ inputs.tag_level }}"
          TAGS=$("./parent/docker.sh" "image tag" "$IMAGE" "${REPOSITORY}:${LATEST_TAG}" "$TAG_INCREASE" "--tag-level=${{ inputs.tag_level }}")
          TAGS_COMPRESSED=$(echo "$TAGS" | tr '\n' ' ')
          echo "TAGS=$TAGS_COMPRESSED" >> $GITHUB_ENV     
          echo "[Notice] > docker image tagged successfully"          

      - name: Push Docker Image
        run: |
          BUILT_IMAGE_NAME="${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.tag }}"
          echo "[Notice] Push docker images"
          TAGS=($TAGS)
          TAGS+=("$BUILT_IMAGE_NAME")
          for TAG in "${TAGS[@]}"; do
            echo "docker push $TAG"
          done
          echo "[Notice] > Pushing docker images successfully"         
          
