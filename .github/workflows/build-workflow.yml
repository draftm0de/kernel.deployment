name: Build Docker Image

on:
  workflow_call:
    inputs:
      namespace:
        description: "Image (Namespace)"
        required: true
        type: string      
      image:
        description: "Image (Name)"
        required: true
        type: string      
      context:
        description: "Docker build context/path"
        required: true
        type: string
      build_target:
        description: "Image Built (Target)"
        required: false
        type: string
      build_args_file:
        description: "Filename to be used for --build-args"
        required: false
        type: string
      build_artifact:
        description: "Artifact Name to be used to store built image"
        required: false
        type: boolean
#      tag_level:
#        description: "Levels for tagging an image"
#        required: true
#        type: number
#      tag_base_version_file:
#         description: "Filename within the Base Version for auto tagging"
#         required: false
#         type: string
#      protected_tag:
#        description: "Protect against duplicate SHA"
#        type: string
#        required: false
#        default: "false"
# for security scan
#      context:
#        description: "Docker build context/path"
#        required: true
#        type: string
      artifact_file:
        description: "Image Artifact File"
        type: string
        required: false
        default: "kernel.caddy.tar"      
      scan_severity:
        description: "Image Scan Severities"
        type: string
        required: false
        default: "CRITICAL,HIGH"
    secrets:
      docker_username:
        description: "Docker Login (Username)"
        required: true
      docker_password:
        description: "Docker Login (Password)"
        required: true
env:
  IMAGE_ARTIFACT_NAME: "image.artifact"
  
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      built_name: ${{ steps.image-build.outputs.built_name }}
      built_file: ${{ steps.image-save.outputs.built_file }}
    steps:
      - name: Check Out Own (parent) Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        id: image-build
        run: |
          echo "::Notice:: Build image..."
          if [ -d "${{ inputs.context }}" ]; then
            IMAGE_TAG="latest"
            BUILD_TARGET="${{ inputs.build_target }}"
            if [ -n "${BUILD_TARGET}" ]; then
              echo "::debug::- Build with --target: $BUILD_TARGET"
              IMAGE_TAG="${BUILD_TARGET}-${IMAGE_TAG}"
              # leading space required, concatination in docker build command
              BUILD_TARGET=" --target $BUILD_TARGET"            
            fi             
            IMAGE="${{ inputs.namespace }}/${{ inputs.image }}:${IMAGE_TAG}"
            BUILD_ARGS_FILE: ${{ inputs.context }}/${{ inputs.build_args_file }}
            if [ -f "$BUILD_ARGS_FILE" ]; then
              echo "::debug::- Build with --build-args: $BUILD_ARGS_FILE"
              BUILD_ARGS=$(cat "$BUILD_ARGS_FILE" | awk -F "=" '{ print "--build-arg " $1"="$2;}' | xargs)
              docker build --tag ${IMAGE}${BUILD_TARGET} $BUILD_ARGS ${{ inputs.context }}
            else
              docker build --tag ${IMAGE}${BUILD_TARGET} ${{ inputs.context }}
            fi
          else
            echo "::error:: Directory ${{ inputs.context }} does not exist"
            exit 1
          fi
          echo "::notice:: > build successfully"
          echo "built_name=${IMAGE}" >> $GITHUB_OUTPUT

      - name: Save Docker Image
        id: image-save
        if: ${{ inputs.build_artifact }}
        run: |
          built_file="${{ inputs.image }}.tar"
          docker save -o ${built_file} ${{ steps.image-build.outputs.built_name }}
          echo "built_file=${built_file}" >> $GITHUB_OUTPUT
          
      - name: Upload Docker Image Artifact
        if: ${{ inputs.build_artifact }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.image-save.outputs.built_file }}
          if-no-files-found: error
          
  test:
    runs-on: ubuntu-20.04
    needs: build
    env:
      ARTIFACT_PATH: "./image.artifacts"
    steps: 
      - name: Check Out Own (parent) Repository
        uses: actions/checkout@v4

      - name: Prepare/Observe .trivyignore File
        id: trivy-ignore-file
        run: |
          TRIVY_IGNORE_FILE="${{ inputs.context }}/.trivyignore"
          if [ -f "$TRIVY_IGNORE_FILE" ]; then
            echo "::notice:: > Use $TRIVY_IGNORE_FILE"
          else
            echo "::notice:: > Create Empty $TRIVY_IGNORE_FILE"
            touch "$TRIVY_IGNORE_FILE"
          fi
          echo "trivy_ignore_file=${TRIVY_IGNORE_FILE}" >> $GITHUB_OUTPUT
        
      - name: Download the Docker Image From Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACT_PATH }}

      - name: Verify
        run: |
          ls -la
          ls ${{ env.ARTIFACT_PATH }} -la
#          
#      - name: Scan Docker Image
#        uses: aquasecurity/trivy-action@0.20.0
#        with:
#          input: ${{ env.ARTIFACT_PATH }}/${{ inputs.artifact_file }}
#          severity: ${{ inputs.scan_severity }}
#        env:
#          TRIVY_IGNORE_FILE: ${{ steps.trivy-ignore-file.outputs.trivy_ignore_file }}
        
