name: Build Docker Image

on:
  workflow_call:
    inputs:
      namespace:
        description: "Image (Namespace)"
        required: true
        type: string      
      image:
        description: "Image (Name)"
        required: true
        type: string
      tag:
        description: "Image (Tag)"
        required: true
        type: string
      context:
        description: "Docker build context/path"
        required: true
        type: string
      build_args:
        description: "Filename to be used for --build-args"
        required: false
        type: string
      sha_protection:
        description: "Protect against duplicate SHA"
        type: string
        default: "false"
      tag_level:
        description: "Levels to tag images"
        type: string
        default: 3
    secrets:
      docker_username:
        description: "Docker Login (Username)"
        required: true
      docker_password:
        description: "Docker Login (Password)"
        required: true

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out kernel.deployment repository
        uses: actions/checkout@v4
        with:
          repository: draftm0de/kernel.deployment
          path: parent

      - name: Check out own (parent) repository
        uses: actions/checkout@v4
        with:
          path: content

      - name: Build Docker Image
        env:
          BUILD_ARGS_FILE: ${{ inputs.build_args }}
        run: |
          echo "[Notice] Build image..."
          CONTEXT="content/${{ inputs.context }}"
          TAG="--tag ${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.tag }}"
          BUILD_ARGS_FILE="$CONTEXT/${BUILD_ARGS_FILE:-.build_args}"
          if [ -f "$BUILD_ARGS_FILE" ]; then
            ./parent/docker.sh build $TAG --build-args=$BUILD_ARGS_FILE $CONTEXT
          else
            docker build $TAG $CONTEXT
          fi
          echo "[Notice] > build successfully"

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.docker_password }}" > content/DOCKER_PASSWORD
          cat "content/DOCKER_PASSWORD" | docker login -u "${{ secrets.docker_username }}" --password-stdin          

      - name: Protect duplicate SHA
        run: |
          echo "[Notice] Protect built SHA against remote"          
          REPOSITORY="${{ inputs.namespace }}/${{ inputs.image }}"
          IMAGE_NAME="$REPOSITORY:${{ inputs.tag }}"
          SHA=$("./parent/docker.sh" "image sha" "$IMAGE_NAME")
          echo "[Debug] SHA for $IMAGE_NAME: $SHA"
          ("./parent/docker.sh" "image tags" "$REPOSITORY" "--remote" "--sha=$SHA" "--exists")
          echo "[Notice] > Protection successfully"

      - name: Get Latest Remote Tag
        id: get_latest_tag
        run: |
          BUILT_IMAGE_NAME="${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.tag }}"
          echo "[Notice] Get latest remote tag for $BUILT_IMAGE_NAME "
          LATEST_TAG=$("./parent/docker.sh" "image tags" "$BUILT_IMAGE_NAME" "--remote" "--latest=patch")
          echo "[Notice] > latest remote tag for $BUILT_IMAGE_NAME: $LATEST_TAG"
          echo "LATEST_TAG=${LATEST_TAG:-0.0.0}" >> $GITHUB_ENV     

      - name: Tag Docker Image
        run: |
          REPOSITORY="${{ inputs.namespace }}/${{ inputs.image }}"          
          IMAGE_NAME="${REPOSITORY}:${{ inputs.tag }}"
          CONTEXT="content/${{ inputs.context }}"
          echo "[Notice] Tag docker image"
          TAG_VERSION_FILE="$CONTEXT/.version"
          if [ -f "$TAG_VERSION_FILE" ]; then
            echo "[Debug] $TAG_VERSION_FILE"  
            TAG_VERSION=$(cat $TAG_VERSION_FILE)
            TAG_INCREASE="--tag-increase=$TAG_VERSION"
            echo "[Notice] automatically increase: $TAG_VERSION"
          else
            TAG_INCREASE="--tag-increase"
          fi         
          echo "[Notice] latest tag: $LATEST_TAG"
          echo "[Notice] count of levels for tagging: ${{ inputs.tag_level }}"
          TAGS=$("./parent/docker.sh" "image tag" "$IMAGE_NAME" "${REPOSITORY}:${LATEST_TAG}" "$TAG_INCREASE" "--tag-level=${{ inputs.tag_level }}")    
          echo "TAGS=${TAGS[*]}" >> $GITHUB_ENV
          echo "[Notice] > docker image tagged successfully"          

      - name: Push Docker Image
        run: |
          BUILT_IMAGE_NAME="${{ inputs.namespace }}/${{ inputs.image }}:${{ inputs.tag }}"
          echo "[Notice] Push docker images"
          TAGS=($TAGS)
          TAGS+=("$BUILT_IMAGE_NAME")
          for TAG in "${TAGS[@]}"; do
            echo "docker push $TAG"
          done
          echo "[Notice] > Pushing docker images successfully"         
          
