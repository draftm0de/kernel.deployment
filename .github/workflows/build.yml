name: Build Docker Image

on:
  workflow_call:
    inputs:
      image:
        description: "docker image name"
        required: true
        type: string
      build_context:
        description: "docker build context path (default: .)"
        required: false
        type: string
        default: .
      build_target:
        description: "docker build --target"
        required: false
        type: string
      build_args_file:
        description: "filename to be used for --build-args"
        required: false
        type: string
      artifact:
        description: "artifact name"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        run: |
          docker buildx version || docker buildx create --use        

      - name: Build Docker Image
        id: image-build
        run: |
          echo "::notice:: Build image..."
          
          image_tag="${{ inputs.image }}:${{ github.sha }}"
          echo "::notice::--tag: $image_tag"
          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT 
          
          build_options="--tag $image_tag"
          if [ -n "${{ inputs.build_target }}" ]; then
              echo "::notice::--target: ${{ inputs.build_target }}"
              # leading space required, concatenation in docker build command
              build_options="$build_options --target ${{ inputs.build_target }}"            
          fi    
          
          build_args_file="${{ inputs.build_context }}/${{ inputs.build_args_file }}"

          if [ -f "$build_args_file" ]; then
            echo "::notice::--build-args: $build_args_file"
            build_args=$(cat "$build_args_file" | awk -F "=" '{ print "--build-arg " $1"="$2;}' | xargs)
            build_options="$build_options $build_args"            
          fi
          docker build $build_options ${{ inputs.build_context }}
          echo "::notice:: > build successfully"
          sha=$(docker inspect --format='{{index .Id}}' $image_tag)
          echo "::notice:: sha: $sha"

          image_tag="$image_tag-buildx"
          DOCKER_BUILDKIT=1
          docker buildx build \
            --builder default \
            --provenance=false \
            --sbom=false \
            $build_args \
            --output=type=docker \
            --tag $image_tag \
            ${{ inputs.build_context }}
          sha=$(docker inspect --format='{{index .Id}}' $image_tag)
          echo "::notice:: sha: $sha"
          sha=$(docker inspect --format='{{ .Id }}' $image_tag)
          echo "::notice:: sha: $sha"
          docker save $image_tag -o image.tar
          sha=$(sha256sum image.tar)
          echo "::notice:: sha: $sha"
          docker inspect $image_tag
#
#      - name: Save Docker Image
#        if: ${{ inputs.artifact }}
#        id: image-save
#        run: |
#          file="${{ inputs.image }}.tar"
#          docker save -o $file ${{ steps.image-build.outputs.image_tag }}
#          echo "file=$file" >> $GITHUB_OUTPUT   

#      - name: Upload Docker Image Artifact
#        if: ${{ inputs.artifact }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ inputs.artifact }}
#          path: ${{ steps.image-save.outputs.file }}
#          if-no-files-found: error
