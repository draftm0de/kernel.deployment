name: Protect Duplicate SHA

on:
  workflow_call:
    inputs:
      image:
        description: "docker image (name / artifact.file)"
        required: true
        type: string    
      artifact:
        description: "artifact name"
        required: false
        type: string
    secrets:
      docker_username:
        required: true
      docker_password:
        required: true

jobs:        
  scan:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_PATH: "./artifacts"
      IMAGE: ${{ inputs.image }}
    steps: 
      - name: Check Out Repository
        uses: actions/checkout@v4
        with:
          repository: draftm0de/kernel.deployment

      - name: Download the Docker Image From Artifacts
        if: ${{ inputs.artifact }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: ${{ env.ARTIFACT_PATH }}      

      - name: Prepare Docker Image
        id: prepare-image
        run: |
          if [ -n "${{ inputs.artifact }}" ]; then
            echo "::notice:: Load Docker Image..."
          
            INPUT="${{ env.ARTIFACT_PATH }}/${{ inputs.image }}.tar"
            echo "::notice:: > load from: ${INPUT}"          
            IMAGE=$(docker load --input ${INPUT} | grep 'Loaded image' | awk '{print $3}')
            echo "::notice:: > image: $IMAGE"
          
            echo "::notice:: > load image successfully"
            echo "image=$IMAGE" >> $GITHUB_ENV
          else
            echo "::notice:: Use Docker Image..."
            echo "image=${{ inputs.image }}" >> $GITHUB_ENV
            echo "::notice:: > Use image successfully"
          fi 

      - name: Get Local Image SHA
        id: local-sha
        run: |
          echo "::notice:: Get Local SHA..."
          
          SHA=$(./docker.sh image sha ${{ steps.prepare-image.outputs.image }})
          echo "::notice:: > SHA for ${{ steps.prepare-image.outputs.image }}: $SHA"
          echo "sha=${SHA}" >> $GITHUB_OUTPUT
          if [ -z "${SHA}" ]; then
            echo "::error:: > Get Local SHA failure"
            exit 1
          else 
            echo "::notice:: > Get Local SHA successfully"
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}

      - name: Get Remote Tags
        run: |
          echo "::notice:: Get Remote Tags..."
          
          TAGS=$(./docker.sh image tags ${{ steps.prepare-image.outputs.image }} --sha=${{ steps.local-sha.outputs.sha }})
          echo "::notice:: > TAGS for ${{ steps.prepare-image.outputs.image }}: $TAGS"             
