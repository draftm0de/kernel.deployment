name: Reusable Version Tagging

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Branch name to operate on"
        required: true
        type: string
      version_pattern:
        description: "Regex pattern to match version branches (e.g., 4.x, 1.0)"
        required: false
        default: "[0-9]+.*"
        type: string
    outputs:
      tags:
        description: "Tags to be used"
        value: ${{ steps.return.outputs.tags }}        

jobs:
  tag-version:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Ensure Current Commit Has No Tag
        id: check_existing_tag
        run: |
          # Check if the current commit already has a matching version tag
          existing_tag=$(git tag --points-at HEAD | grep -E "^[0-9]+\.[0-9]+\.[0-9]+$" || true)
          if [ -n "$existing_tag" ]; then
            echo "**error* commit already has a tag, skipping tagging."
            exit 0
          fi
          echo "**notice* current commit has no tag, continue tagging"

      - name: Determine Base Version from Branch Name
        id: get_base_version
        run: |
          # Use the branch_name input as the base version
          base_version="${{ inputs.branch_name }}"
          echo "**notice** used base version: $base_version"
          echo "BASE_VERSION=$base_version" >> $GITHUB_ENV

      - name: Find Latest Tag for Base Version
        id: find_latest_tag
        run: |
          # Find the latest tag matching the base version pattern (e.g., 4.3.*)
          latest_tag=$(git tag --list "${{ env.BASE_VERSION }}.*" --sort=-v:refname | head -n 1)

          # Determine the new tag
          if [ -z "$latest_tag" ]; then
            echo "**notice** latest base version tag: no latest tag"          
            # No existing tags, start with .1
            new_tag="${{ env.BASE_VERSION }}.1"            
          else
            echo "**notice** latest base version tag: $latest_tag"          
            # Increment the patch version
            patch_version=${latest_tag##*.}
            new_patch_version=$((patch_version + 1))
            new_tag="${{ env.BASE_VERSION }}.$new_patch_version"
          fi
          echo "**notice** use new tag: $new_tag"          
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Set Tags
        id: return
        run: |
          # Create a comma-separated output
          echo "**notice** tags: ${{ env.BASE_VERSION }},${{ env.NEW_TAG }}"
          echo "tags=${{ env.BASE_VERSION }},${{ env.NEW_TAG }}" >> $GITHUB_OUTPUT          
