name: "Build Image Tags"
description: "Build Image Tags"
inputs:
  source:
    description: "source branch"
    required: true
  target:
    description: "branch to be merged into"
    required: true

outputs:
  tags:
    description: "tags to be use for image"
    value: ${{ steps.get-tags.outputs.tags }}

runs:
  using: "composite"
  steps:
    - name: "Convert target branch into version"
      id: target
      uses: draftm0de/kernel.deployment/.github/actions/convert-branch-to-version@main
      with:
        branch: ${{ inputs.target }}

    - name: "Convert source branch into version"
      id: source
      uses: draftm0de/kernel.deployment/.github/actions/convert-branch-to-version@main
      with:
        branch: ${{ inputs.source }}

    - name: "Retrieve Versioned Branch Tags"
      id: get-branch-tags
      shell: bash
      run: |
        echo "::notice::Retrieving versioned branch tags..."
        if [ -n "${{ steps.source.outputs.branch }}" ] && [ -n "${{ steps.target.outputs.branch }}" ] ; then
          echo "::notice::> source and target matches version patterns"
          # source: 1.2.2 => target: 1.2.3
          if [ -n "${{ steps.source.outputs.patch }}" ] && [ -n "${{ steps.target.outputs.patch }}" ] ; then
            echo "::error::> source and target branches having the same version depth (patch)"
            exit 1
          fi
          # source: 1.2 => target: 1.3
          if [ -z "${{ steps.source.outputs.patch }}" ] && [ -z "${{ steps.target.outputs.patch }}" ] && [ -n "${{ steps.source.outputs.minor }}" ] && [ -n "${{ steps.target.outputs.minor }}" ] ; then
            echo "::error::> source and target branches having the same version depth (minor)"
            exit 1
          fi  
          # source: 1 => target: 2
          if [ -z "${{ steps.source.outputs.minor }}" ] && [ -z "${{ steps.target.outputs.minor }}" ] && [ -n "${{ steps.source.outputs.major }}" ] && [ -n "${{ steps.target.outputs.major }}" ] ; then
            echo "::error::> source and target branches having the same version depth (major)"
            exit 1
          fi         
          # source: 1.2.3 => target: 1.1.?
          if [ -n "${{ steps.source.outputs.minor }}" ] && [ -n "${{ steps.target.outputs.minor }}" ] && (( ${{ steps.source.outputs.minor }} > ${{ steps.target.outputs.minor }} )); then
            echo "::error::> source minor version is greater than target minor version"
            exit 1        
          fi
          # source: 2.2.3 => target: 1.1
          if [ -n "${{ steps.source.outputs.major }}" ] && [ -n "${{ steps.target.outputs.major }}" ] && (( ${{ steps.source.outputs.major }} > ${{ steps.target.outputs.major }} )); then
             echo "::error::> source major version is greater than target major version"
             exit 1
          fi
          # target: 1.2.3
          if [ -n "${{ steps.target.outputs.patch }}" ]; then
            echo "::error::> target branch already has a patch version"
            exit 1
          fi
          # source: 1.2.1 => target: 1
          if [ -n "${{ steps.source.outputs.patch }}" ] && [ -z "${{ steps.target.outputs.minor }}" ]; then
            echo "::error::> source branch with patch version requires target branch with minor version"
            exit 1
          fi        
          # source: 1.0.1 => target: 1.0 (1.0.2 exists)
          # minor/patch version conflict
          if [ -n "${{ steps.target.outputs.minor }}" ]; then
            pattern="origin"
            pattern="${pattern}/${{ steps.target.outputs.prefix }}${{ steps.target.outputs.major }}"
            if [ -n "${{ steps.target.outputs.minor }}" ]; then
              pattern="${pattern}.${{ steps.target.outputs.minor }}"
            fi
            if [ -n "${{ steps.target.outputs.postfix }}" ]; then
              pattern="${pattern}.*-${{ steps.target.outputs.minor }}"
            else
              pattern="${pattern}.*"
            fi  
          fi
        
          if [ -n "${pattern}" ]; then
            echo "::notice::> git fetch"
            # fetch=$(git fetch)
            echo "::notice::> search pattern: $pattern" 
            latest=$(git branch -r | grep -E "${pattern}" | sed 's|origin/||' | sort -Vr | head -n 1)                    
            if [ -n "$latest" ]; then
              echo "::notice::> latest branch: $latest"
              REGEX="^(v)?([0-9]+)(\.[0-9]+)?(\.[0-9]+)?(-[a-zA-Z0-9]+)?$"
              if [[ "$latest" =~ $REGEX ]]; then
                latest_matched_branch="${latest#origin/}"
                echo "::notice::> latest matching branch: $latest_matched_branch"
                latest_minor="${BASH_REMATCH[3]}"
                latest_patch="${BASH_REMATCH[4]}"
                echo "::notice::> latest.minor: $latest_minor"        
                echo "::notice::> latest.patch: $latest_patch"
                if (( ${{ steps.source.outputs.patch }} < $latest_patch )); then
                  echo "::error:: source patch version is lower than latest available patch version"
                  exit 1
                fi
              fi
            else
              echo "::notice::> no latest branch found"
            fi
          fi
        fi
        
        image_tags=()
        if [ -n "${{ steps.source.outputs.branch }}" ]; then
          echo "::notice::> use versioned source branch: ${{ steps.source.outputs.branch }}"
          image_tags+=("${{ steps.source.outputs.branch }}")
        fi
        if [ -n "${{ steps.target.outputs.branch }}" ]; then
          echo "::notice::> use versioned target branch: ${{ steps.target.outputs.branch }}"
          image_tags+=("${{ steps.target.outputs.branch }}")
        fi
        
        echo "::notice::Versioned branch tags retrieved."
        echo "tags=${image_tags[*]}" >> $GITHUB_OUTPUT

    - name: "Retrieve Versioned Commit Tags"
      id: get-commit-tags
      shell: bash
      run: |
        echo "::notice::Retrieving versioned commit tags..."
        git fetch --tags
        
        # Get all tags for the current commit
        commit=$(git rev-parse HEAD)
        tags=$(git tag --contains "$commit")
        
        # Filter tags matching the regex
        regex="^(v)?([0-9]+)(\.[0-9]+)?(\.[0-9]+)?(-[a-zA-Z0-9]+)?$"
        image_tags=()
        while IFS= read -r tag; do
          if [[ $tag =~ $regex ]]; then
            echo "::notice::> use versioned commit tag: $tag"
            image_tags+=("$tag")
          fi
        done <<< "$tags"  
        
        echo "::notice::Versioned commit tags retrieved."
        echo "tags=${image_tags[*]}" >> $GITHUB_OUTPUT

    - name: "Combine Versioned Image Tags"
      id: get-tags
      shell: bash
      run: |
        echo "::notice::Combining image tags..."
        image_tags=()
        while IFS= read -r tag; do
          image_tags+=("$tag")
        done <<< "${{ steps.get-commit-tags.outputs.tags }}" 
        while IFS= read -r tag; do
          image_tags+=("$tag")
        done <<< "${{ steps.get-branch-tags.outputs.tags }}"
        
        echo "::notice::Image tags combined."
        echo "tags=${image_tags[*]}" >> $GITHUB_OUTPUT
